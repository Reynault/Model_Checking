// Choix du modèle, ici PTA
// Le moteur utilisé est Digital Clock
pta

//-------CONFIGURATION-------//

// Valeurs limites pour les ressources
const int N_EXP = 10;
const int N_GOLD  = 10;

// Valeurs liées aux événements
// Voleur
const int THIEF_GOLD = 5;
// Accident
const int ACCIDENT_TIME = 5;
// Artéfact
const int ARTEFACT_EXP = 7;
// Trésor
const int TREASURE_TIME = 6;
const int TREASURE_GOLD = 6;
// Art martiaux
const int MARTIAL_COST = 3;
const int MARTIAL_EXP = 5;

// Temps limite pour une partie
const int T = 10;

module hero
	// horloge à utiliser pour bloquer le héro
	x: clock;
	time: clock;
	end: bool init false;

	// entier qui représente la position du hero
	hlocation: [0..2] init 0;
	// entier indique l'événement en cours, 0 étant aucun
	hevent: [0..6] init 0;
	// entier indiquant la quête en cours, 0 étant aucune
	hquest: [0..2] init 0;
	// Variables qui représentent respectivement OR_H et EXP_H
	goldHero : [0..N_GOLD] init 0;
	expHero : [0..N_EXP] init 0;
	
	invariant
		// invariants permettant de s'arrêter
		(time <= T) &
		// invariants permettant d'éviter au héro
		// de rester sur un évènement et de perdre du temps
		(hevent=1 => x<=0) &
		(hevent=2 => x<=ACCIDENT_TIME) &
		(hevent=3 => x<=0) &
		(hevent=4 => x<=TREASURE_TIME) &
		(hevent=5 => x<=0) &
		(hevent=6 => x<=0) &
		(hquest=1 => x<=5)
	endinvariant

	[] time = T -> 1: (end'=true);

	// ---CONFIGURATION DES ROUTES---

	[] x = 1 & hevent = 0 & hlocation = 0 -> 
		 0.4:(hevent'=1)&(x'=0)&(hlocation'=1)
		+0.05:(hevent'=2)&(x'=0)&(hlocation'=1)
		+0.05:(hevent'=3)&(x'=0)&(hlocation'=1)
		+0.05:(hevent'=4)&(x'=0)&(hlocation'=1)
		+0.2:(hevent'=5)&(x'=0)&(hlocation'=1)
		+0.25:(hevent'=6)&(x'=0)&(hlocation'=1);
	[] x = 1 & hevent = 0 & hlocation = 1 -> 
		 0.1:(hevent'=1)&(x'=0)&(hlocation'=2)
		+0.1:(hevent'=2)&(x'=0)&(hlocation'=2)
		+0.2:(hevent'=3)&(x'=0)&(hlocation'=2)
		+0.2:(hevent'=4)&(x'=0)&(hlocation'=2)
		+0.1:(hevent'=5)&(x'=0)&(hlocation'=2)
		+0.3:(hevent'=6)&(x'=0)&(hlocation'=2);
	[] x = 1 & hevent = 0 & hlocation = 2 -> 
		 0.2:(hevent'=1)&(x'=0)&(hlocation'=0)
		+0.2:(hevent'=2)&(x'=0)&(hlocation'=0)
		+0.2:(hevent'=3)&(x'=0)&(hlocation'=0)
		+0.1:(hevent'=4)&(x'=0)&(hlocation'=0)
		+0.2:(hevent'=5)&(x'=0)&(hlocation'=0)
		+0.1:(hevent'=6)&(x'=0)&(hlocation'=0);
	[] x = 1 & hevent = 0 & hlocation = 2 -> 
   	 	 0.1:(hevent'=1)&(x'=0)&(hlocation'=1)
		+0.2:(hevent'=2)&(x'=0)&(hlocation'=1)
		+0.2:(hevent'=3)&(x'=0)&(hlocation'=1)
		+0.1:(hevent'=4)&(x'=0)&(hlocation'=1)
		+0.2:(hevent'=5)&(x'=0)&(hlocation'=1)
		+0.2:(hevent'=6)&(x'=0)&(hlocation'=1);

	// ---CONFIGURATION DES EVENEMENTS---

	// événement du voleur
	[] x=0 & goldHero < THIEF_GOLD & hevent = 1 -> 
		1:(goldHero'=0)&(hevent'=0)&(x'=0);
	[] x=0 & goldHero >= THIEF_GOLD & hevent = 1 -> 
		1:(goldHero'=goldHero-THIEF_GOLD)&(hevent'=0)&(x'=0);

	// événement de l'accident
	[] x=ACCIDENT_TIME & hevent = 2 -> 
		1:(hevent'=0)&(x'=0);

	// événement de l'artefact
	[] x=0 & (expHero+ARTEFACT_EXP) <= N_EXP & hevent = 3 -> 
		1:(expHero'=expHero+ARTEFACT_EXP)&(hevent'=0)&(x'=0);
	[] x=0 & (expHero+ARTEFACT_EXP) > N_EXP & hevent = 3 -> 
		1:(expHero'=N_EXP)&(hevent'=0)&(x'=0);

	// événement du trésor
	[] x=TREASURE_TIME & (goldHero+TREASURE_GOLD) <= N_GOLD & hevent = 4 -> 
		1:(goldHero'=goldHero+TREASURE_GOLD)&(hevent'=0)&(x'=0);
	[] x=TREASURE_TIME & (goldHero+TREASURE_GOLD) > N_GOLD & hevent = 4 -> 
		1:(goldHero'=N_GOLD)&(hevent'=0)&(x'=0);

	// événement du maître des arts martiaux
	[] x=0 & goldHero < MARTIAL_COST & hevent = 5 -> 
		1:(hevent'=0)&(x'=0);
	[] x=0 & goldHero >= MARTIAL_COST & (expHero + MARTIAL_EXP) <= N_EXP& hevent = 5 -> 
		1:(goldHero'=goldHero-MARTIAL_COST)&(expHero'=expHero+MARTIAL_EXP)&(hevent'=0)&(x'=0);
	[] x=0 & goldHero >= MARTIAL_COST & (expHero + MARTIAL_EXP) > N_EXP& hevent = 5 -> 
		1:(goldHero'=goldHero-MARTIAL_COST)&(expHero'=N_EXP)&(hevent'=0)&(x'=0);

	// pas d'événements
	[] x=0 & hevent = 6 -> 
		1:(hevent'=0)&(x'=0);

	// ---CONFIGURATION DES QUÊTES Q1---

	// transition d'entrée de la première quête
	[] x=1 & hevent = 0 & goldHero >= 1 & hlocation = 0 & hquest = 0 ->
		1:(hquest'=1)&(x'=0);
	
	// transition de sortie de la première quête
	[] x=5 & goldHero >= 1 & (expHero + 8) <= N_EXP & hquest = 1 ->
		1:(expHero'=expHero+8)&(goldHero'=goldHero-1)&(hquest'=0)&(x'=0);
		
	[] x=5 & goldHero >= 1 & (expHero + 8) > N_EXP & hquest = 1 ->
		1:(expHero'=N_EXP)&(goldHero'=goldHero-1)&(hquest'=0)&(x'=0);

	// ---CONFIGURATION DES QUÊTES Q2---
	
	// transitions d'acceptation de la deuxième quête
	[] x=1 & hevent = 0 & hlocation = 1 & hquest = 0 ->
		1:(hquest'=2)&(x'=0);
	//[] x=1 & hevent = 0 & hlocation = 2 & hquest = 0 ->
	//	1:(hquest'=2)&(x'=0);

	// transitions de succès de la deuxième quête
	//[] x=1 & hevent = 0 & (expHero + 5) <= N_EXP & hlocation = 1 & hquest = 2 ->
	//	1:(hquest'=0)&(expHero'=expHero+5)&(x'=0);
	//[] x=1 & hevent = 0 & (expHero + 5) > N_EXP & hlocation = 1 & hquest = 2 ->
	//	1:(hquest'=0)&(expHero'=N_EXP)&(x'=0);

	[] x=1 & hevent = 0 & (expHero + 5) <= N_EXP & hlocation = 2 & hquest = 2 ->
		1:(hquest'=0)&(expHero'=expHero+5)&(x'=0);
	[] x=1 & hevent = 0 & (expHero + 5) > N_EXP & hlocation = 2 & hquest = 2 ->
		1:(hquest'=0)&(expHero'=N_EXP)&(x'=0);
endmodule

module badGuy = hero [
	x = mx,
	time = mtime,
	end = mend,
	hlocation = mlocation,
	hquest = mquest,
	hevent = mevent,
	goldHero = goldM,
	expHero = expM
] endmodule

label "hFinished" = (end = true);

label "hNotOnARoad" = (hevent = 0);
label "hThief" = (hevent = 1);
label "hAccident" = (hevent = 2);
label "hArtefact" = (hevent = 3);
label "hTreasure" = (hevent = 4);
label "hMartial" = (hevent = 5);
label "hNoEvent" = (hevent = 6);

label "hQuestQ1" = (hquest = 1);
label "hQuestQ2" = (hquest = 2);